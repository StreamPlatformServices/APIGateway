// <auto-generated />
using System;
using ContentMetadataServiceMock.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ContentMetadataServiceMock.Migrations
{
    [DbContext(typeof(ContentMetadataDatabaseContext))]
    partial class ContentMetadataDatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.6");

            modelBuilder.Entity("ContentMetadataServiceMock.Persistance.Data.ContentCommentData", b =>
                {
                    b.Property<Guid>("ContentCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ContentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ContentCommentId");

                    b.HasIndex("ContentId");

                    b.ToTable("ContentComments");
                });

            modelBuilder.Entity("ContentMetadataServiceMock.Persistance.Data.ContentData", b =>
                {
                    b.Property<Guid>("ContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("Duration")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("LicenseRulesId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("ContentId");

                    b.HasIndex("LicenseRulesId")
                        .IsUnique();

                    b.ToTable("Contents");
                });

            modelBuilder.Entity("ContentMetadataServiceMock.Persistance.Data.LicenseRulesData", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpirationTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("LicenseStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LicenseType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxDevicesCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UploadTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Uuid");

                    b.ToTable("LicenseRules");
                });

            modelBuilder.Entity("ContentMetadataServiceMock.Persistance.Data.ContentCommentData", b =>
                {
                    b.HasOne("ContentMetadataServiceMock.Persistance.Data.ContentData", "Content")
                        .WithMany("Comments")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");
                });

            modelBuilder.Entity("ContentMetadataServiceMock.Persistance.Data.ContentData", b =>
                {
                    b.HasOne("ContentMetadataServiceMock.Persistance.Data.LicenseRulesData", "LicenseRules")
                        .WithOne("Content")
                        .HasForeignKey("ContentMetadataServiceMock.Persistance.Data.ContentData", "LicenseRulesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LicenseRules");
                });

            modelBuilder.Entity("ContentMetadataServiceMock.Persistance.Data.ContentData", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("ContentMetadataServiceMock.Persistance.Data.LicenseRulesData", b =>
                {
                    b.Navigation("Content")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
